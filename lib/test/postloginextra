// import 'package:flutter/material.dart';
// import 'package:intl/intl.dart';
// import 'package:ooriba_s3/facial/DB/DatabaseHelper.dart';
// import 'package:ooriba_s3/facial/RecognitionScreen.dart';
// import 'package:ooriba_s3/facial/RegistrationScreen.dart';
// import 'package:ooriba_s3/services/auth_service.dart';
// import 'package:ooriba_s3/services/retrieveDataByEmail.dart';

// class PostLoginPage extends StatefulWidget {
//   final String email;
//   final Map<String, dynamic> userDetails;

//   const PostLoginPage({Key? key, required this.email, required this.userDetails}) : super(key: key);

//   @override
//   _PostLoginPageState createState() => _PostLoginPageState();
// }
// class CheckInOutRecord {
//   final DateTime date;
//   bool isCheckedIn;
//   DateTime? checkInTime;
//   DateTime? checkOutTime;

//   CheckInOutRecord({
//     required this.date,
//     this.isCheckedIn = false,
//     this.checkInTime,
//     this.checkOutTime,
//   });
// }
// class _PostLoginPageState extends State<PostLoginPage> {
//     String? employeeId;
//   String? employeeName;
//   String? employeePhoneNumber;
//   final FirestoreService firestore_Service = FirestoreService();
//   late DatabaseHelper dbHelper;
//   bool isRegistered = false;

//   @override
//   void initState() {
//     super.initState();
//     dbHelper = DatabaseHelper();
//     _checkIfFaceIsRegistered();
//     _fetchEmployeeDetails(widget.email);

//   }

//   Future<void> _checkIfFaceIsRegistered() async {
//     await dbHelper.init();
//     final allRows = await dbHelper.queryAllRows();
//     setState(() {
//       isRegistered = allRows.isNotEmpty;
//     });
//   }
//     Future<void> _fetchEmployeeDetails(String email) async {
//     FirestoreService firestoreService = FirestoreService();
//     Map<String, dynamic>? employeeData = await firestoreService.getEmployeeByEmail(email);

//     if (employeeData != null) {
//       setState(() {
//         employeeId = employeeData['employeeId'];
//         employeeName = employeeData['firstName'];
//         employeePhoneNumber = employeeData['phoneNo']; // Assuming the phone number is stored with this key
//       });
//     }
//   }
//     String formatTimeWithoutSeconds(DateTime? dateTime) {
//     if (dateTime == null) {
//       return 'Null'; // Return 'N/A' if dateTime is null
//     }
//     return DateFormat('yyyy-MM-dd HH:mm').format(dateTime); // Format without seconds
//   }

//   @override
//   Widget build(BuildContext context) {

//     return Scaffold(
//       appBar: AppBar(
//          title: Text('Welcome, ${employeeId != null && employeeName != null ? '$employeeName-$employeeId' : widget.email}'),
//         actions: [
//           IconButton(
//             icon: const Icon(Icons.logout),
//             onPressed: () async {
//               await AuthService().signout(context: context);
//             },
//           ),
//         ],
//       ),
//       body: Center(
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             const SizedBox(height: 20),
//             ElevatedButton(
//               onPressed: () async {
//                 if (isRegistered) {
//                   Map<String, dynamic>? employeeData = await firestore_Service.searchEmployee(email: widget.email);
//                   String firstName = employeeData != null ? employeeData['firstName'] ?? '' : '';
//                    Navigator.push(
//                           context,
//                           MaterialPageRoute(
//             builder: (BuildContext context) =>
//                 RecognitionScreen(email: widget.email),
//           ),
//                         );
//                 } else {
//                   Navigator.push(
//                     context,
//                     MaterialPageRoute(builder: (context) => RegistrationScreen()),
//                   );
//                 }
//               },
//               child: Text(isRegistered ? 'Check-in' : 'Register for Facial Authentication'),
//             ),
//             const SizedBox(height: 20),
//           ],
//         ),
//       ),
//     );
//   }
// }
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:ooriba_s3/facial/DB/DatabaseHelper.dart';
import 'package:ooriba_s3/facial/RecognitionScreen.dart';
import 'package:ooriba_s3/facial/RegistrationScreen.dart';
import 'package:ooriba_s3/services/auth_service.dart';
import 'package:ooriba_s3/services/retrieveDataByEmail.dart' as retrieveDataByEmail;
import 'package:ooriba_s3/services/user.dart';

class PostLoginPage extends StatefulWidget {
  final String email;
  final Map<String, dynamic> userDetails;

  const PostLoginPage({super.key, required this.email, required this.userDetails});

  @override
  _PostLoginPageState createState() => _PostLoginPageState();
}

class _PostLoginPageState extends State<PostLoginPage> {
  String? employeeId;
  String? employeeName;
  String? employeePhoneNumber;
  String? dpImageUrl;
  DateTime? lastLoginTime;
  final UserFirestoreService firestoreService = UserFirestoreService();
  late DatabaseHelper dbHelper;
  bool isRegistered = false;
  DateTime? checkInTime;
  DateTime? checkOutTime;
  bool isLoading = true;
  bool isCheckedIn = false;

  @override
  void initState() {
    super.initState();
    dbHelper = DatabaseHelper();
    fetchEmployeeData();
    _checkIfFaceIsRegistered();
  }

  Future<void> fetchEmployeeData() async {
    await _fetchEmployeeDetails(widget.email);
    await _fetchCheckInStatus(widget.email);
    await _fetchLastLoginTime(widget.email);
    setState(() {
      isLoading = false;
    });
  }

  Future<void> _checkIfFaceIsRegistered() async {
    await dbHelper.init();
    final allRows = await dbHelper.queryAllRows();
    setState(() {
      isRegistered = allRows.isNotEmpty;
    });
  }

  Future<void> _fetchEmployeeDetails(String email) async {
    retrieveDataByEmail.FirestoreService firestoreService = retrieveDataByEmail.FirestoreService();
    Map<String, dynamic>? employeeData = await firestoreService.getEmployeeByEmail(email, "Regemp");

    if (employeeData != null) {
      setState(() {
        employeeId = employeeData['employeeId'];
        employeeName = employeeData['firstName'];
        employeePhoneNumber = employeeData['phoneNo'];
        dpImageUrl = employeeData['dpImageUrl'];
      });
    } else {
      print('Employee details not found for email: $email');
    }
  }

  Future<void> _fetchCheckInStatus(String email) async {
    UserFirestoreService firestoreService = UserFirestoreService();
    DateTime today = DateTime.now();
    String todayDate = DateFormat('yyyy-MM-dd').format(today);

    try {
      DocumentSnapshot docSnapshot = await firestoreService.getCheckInOutData(email, todayDate);

      if (docSnapshot.exists) {
        Map<String, dynamic> data = docSnapshot.data() as Map<String, dynamic>;
        Map<String, dynamic>? employeeData = data[employeeName];

        if (employeeData != null) {
          setState(() {
            isCheckedIn = employeeData['checkIn'] != null && employeeData['checkOut'] == null;
            checkInTime = employeeData['checkIn']?.toDate();
            checkOutTime = employeeData['checkOut']?.toDate();
          });
        }
      } else {
        print('Check-in data not found for date: $todayDate');
      }
    } catch (e) {
      print('Error fetching check-in status: $e');
    }
  }
Future<void> _fetchLastLoginTime(String email) async {
  try {
    DocumentSnapshot docSnapshot = await firestoreService.getLastLoginTime(email);

    if (docSnapshot.exists) {
      Map<String, dynamic> data = docSnapshot.data() as Map<String, dynamic>;
      var lastLoginTimestamp = data['lastLoginTime'];

      if (lastLoginTimestamp != null) {
        setState(() {
          lastLoginTime = (lastLoginTimestamp as Timestamp).toDate();
        });
      } else {
        print('Last login time is null for email: $email');
        await _updateLastLoginTime(email);
      }
    } else {
      print('Document not found for email: $email');
      await _createAndSaveLastLoginTime(email);
    }
  } catch (e) {
    print('Error fetching last login time: $e');
    if (e is FirebaseException && e.code == 'not-found') {
      await _createAndSaveLastLoginTime(email);
    }
  }
}

Future<void> _createAndSaveLastLoginTime(String email) async {
  DateTime now = DateTime.now();
  await firestoreService.createLastLoginTime(email, now);
  setState(() {
    lastLoginTime = now;
  });
}

  Future<void> _updateLastLoginTime(String email) async {
    DateTime now = DateTime.now();
    await firestoreService.saveLastLoginTime(email, now);
    setState(() {
      lastLoginTime = now;
    });
  }

  Future<void> _checkIn() async {
    DateTime now = DateTime.now();
    await firestoreService.addCheckInOutData(employeeName!, now, null, now);

    setState(() {
      isCheckedIn = true;
      checkInTime = now;
    });
  }

  Future<void> _checkOut() async {
    DateTime now = DateTime.now();
    await firestoreService.addCheckInOutData(employeeName!, checkInTime!, now, now);

    setState(() {
      isCheckedIn = false;
      checkOutTime = now;
    });
  }

  Future<void> _saveLastLoginTime() async {
    DateTime now = DateTime.now();
    await firestoreService.saveLastLoginTime(widget.email, now);
  }

  String formatTimeWithoutSeconds(DateTime? dateTime) {
    if (dateTime == null) {
      return 'N/A';
    }
    // return DateFormat('dd-MM-yyyy   HH:mm').format(dateTime);
    return DateFormat.yMMMMd('en_US').add_Hm().format(dateTime);
  }

  void navigateToFaceRecognitionScreen() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => RecognitionScreen(email: widget.email)),
    );

    if (result == true) {
      if (isCheckedIn) {
        _checkOut();
      } else {
        _checkIn();
      }
    }
  }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Row(
//           children: [
//             if (dpImageUrl != null)
//               CircleAvatar(
//                 backgroundImage: NetworkImage(dpImageUrl!),
//               ),
//             SizedBox(width: 8),
//             Column(
//               crossAxisAlignment: CrossAxisAlignment.start,
//               children: [
//                 // Text(employeeName != null ? 'Welcome, $employeeName' : widget.email),
//                 Text(employeeName != null ? 'Welcome, $employeeName-$employeeId' : "Loading"),
//                 if (lastLoginTime != null)
//                   Text(
//                     'Last login: ${formatTimeWithoutSeconds(lastLoginTime)}',
//                     style: TextStyle(fontSize: 1),
//                   ),
//               ],
//             ),
//           ],
//         ),
//         actions: [
//           IconButton(
//             icon: const Icon(Icons.logout),
//             onPressed: () async {
//               await _saveLastLoginTime();
//               await AuthService().signout(context: context);
//             },
//           ),
//         ],
//       ),
//       body: isLoading
//           ? Center(child: CircularProgressIndicator())
//           : Center(
//               child: Column(
//                 mainAxisAlignment: MainAxisAlignment.center,
//                 children: [
//                   const SizedBox(height: 20),
//                   ElevatedButton(
//                     onPressed: () {
//                       if (isRegistered) {
//                         navigateToFaceRecognitionScreen();
//                       } else {
//                         Navigator.push(
//                           context,
//                           MaterialPageRoute(builder: (context) => RegistrationScreen()),
//                         );
//                       }
//                     },
//                     style: ElevatedButton.styleFrom(
//                       backgroundColor: isCheckedIn ? Colors.green : Colors.orange,
//                     ),
//                     child: Text(isCheckedIn ? 'Check-out' : 'Check-in'),
//                   ),
//                   const SizedBox(height: 20),
//                   if (isCheckedIn) ...[
//                     Text('Checked in at: ${formatTimeWithoutSeconds(checkInTime)}'),
//                   ],
//                   if (checkOutTime != null && !isCheckedIn) ...[
//                     Text('Checked out at: ${formatTimeWithoutSeconds(checkOutTime)}'),
//                   ],
//                 ],
//               ),
//             ),
//     );
//   }
// }
 @override
  Widget build(BuildContext context) {
    return Scaffold(
      // appBar: AppBar(
      //   title: const Text("Employee Dashboard"),
      //   actions: [
      //     IconButton(
      //       icon: const Icon(Icons.logout),
      //       onPressed: () async {
      //         await AuthService().signout(context: context);
      //       },
      //     ),
      //   ],)
      appBar: AppBar(
        title: Row(
          children: [
            if (dpImageUrl != null)
              CircleAvatar(
                backgroundImage: NetworkImage(dpImageUrl!),
              ),
            SizedBox(width: 8),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(employeeName != null ? 'Welcome, $employeeName-$employeeId' : "Loading"),
                if (lastLoginTime != null)
                  Text(
                    'Last login: ${formatTimeWithoutSeconds(lastLoginTime)}',
                    style: TextStyle(fontSize: 14),
                  ),
              ],
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              await _saveLastLoginTime();
              // Sign out logic here
            },
          ),
        ],
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                children: [
                  // Row(
                  //   children: [
                  //     CircleAvatar(
                  //       radius: 20,
                  //       backgroundImage: NetworkImage(dpImageUrl!),
                  //     ),
                  //     const SizedBox(width: 16),
                  //     Column(
                  //       crossAxisAlignment: CrossAxisAlignment.start,
                  //       children: [
                  //         Text(
                  //           employeeName != null ? '$employeeName-$employeeId' : "Loading",
                  //           style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  //         ),
                  //         const SizedBox(height: 8),
                  //         Text(
                  //           'Last login: ${formatTimeWithoutSeconds(lastLoginTime)}',
                  //           style: const TextStyle(fontSize: 16),
                  //         ),
                  //       ],
                  //     ),
                  //   ],
                  // ),
                  // const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      if (isRegistered) {
                        navigateToFaceRecognitionScreen();
                      } else {
                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) => const RegistrationScreen()),
                        );
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: isCheckedIn ? Colors.green : Colors.orange,
                    ),
                    child: Text(isCheckedIn ? 'Check-out' : 'Check-in'),
                  ),
                  const SizedBox(height: 20),
                  const SizedBox(height: 20),
                  if (isCheckedIn) ...[
                    Text('Checked in at: ${formatTimeWithoutSeconds(checkInTime)}'),
                  ],
                  if (checkOutTime != null && !isCheckedIn) ...[
                    Text('Checked out at: ${formatTimeWithoutSeconds(checkOutTime)}'),
                  ],
                ],
              ),
            ),
    );
  }
}