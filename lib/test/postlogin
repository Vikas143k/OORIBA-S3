@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Row(
        children: [
          if (dpImageUrl != null)
            CircleAvatar(
              backgroundImage: NetworkImage(dpImageUrl!),
              radius: 20,
            ),
          SizedBox(width: 8),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                employeeName != null
                    ? 'Welcome, $employeeName-$employeeId'
                    : "Loading",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              if (lastLoginTime != null)
                Text(
                  'Last login: ${formatTimeWithoutSeconds(lastLoginTime)}',
                  style: TextStyle(fontSize: 14, color: Colors.grey[600]),
                ),
            ],
          ),
        ],
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.logout),
          onPressed: () async {
            await _saveLastLoginTime();
            await AuthService().signout(context: context);
          },
          tooltip: 'Logout',
        ),
      ],
    ),
    body: isLoading
        ? const Center(child: CircularProgressIndicator())
        : Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                Center(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      ElevatedButton(
                        onPressed: isWithinRange
                            ? () {
                                if (isRegistered) {
                                  navigateToFaceRecognitionScreen();
                                } else {
                                  Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) =>
                                          const RegistrationScreen(),
                                    ),
                                  );
                                }
                              }
                            : null,
                        style: ElevatedButton.styleFrom(
                          backgroundColor:
                              isWithinRange ? Colors.orange : Colors.grey,
                          padding: EdgeInsets.symmetric(
                              horizontal: 20, vertical: 15),
                          textStyle: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        child: Text(isCheckedIn ? 'Check-out' : 'Check-in'),
                      ),
                      SizedBox(width: 10),
                      IconButton(
                        icon: const Icon(Icons.location_on, size: 40),
                        onPressed: _checkLocation,
                        tooltip: 'Check Location',
                      ),
                      SizedBox(width: 20),
                      isPresent
                          ? FutureBuilder<String>(
                              future: getImageUrl(employeeId!),
                              builder: (context, snapshot) {
                                if (snapshot.connectionState ==
                                    ConnectionState.waiting) {
                                  return const CircularProgressIndicator();
                                } else if (snapshot.hasError ||
                                    !snapshot.hasData ||
                                    snapshot.data!.isEmpty) {
                                  return const Text('No image');
                                } else {
                                  return InkWell(
                                    onTap: () {
                                      showDialog(
                                        context: context,
                                        builder: (context) => AlertDialog(
                                          content: Image.network(snapshot.data!),
                                          actions: <Widget>[
                                            TextButton(
                                              child: const Text('Close'),
                                              onPressed: () {
                                                Navigator.of(context).pop();
                                              },
                                            ),
                                          ],
                                        ),
                                      );
                                    },
                                    child: Image.network(
                                      snapshot.data!,
                                      width: 60,
                                      height: 60,
                                      fit: BoxFit.cover,
                                    ),
                                  );
                                }
                              },
                            )
                          : const Icon(Icons.no_accounts, size: 60),
                    ],
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Expanded(
                      child: SizedBox(
                        height: 80,
                        child: Card(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Icon(Icons.login, color: Colors.green),
                              const SizedBox(height: 4),
                              const Text('Last Check-in',
                                  style:
                                      TextStyle(fontWeight: FontWeight.bold)),
                              Text(formatTime(checkInTime)),
                            ],
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Expanded(
                      child: SizedBox(
                        height: 80,
                        child: Card(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Icon(Icons.logout, color: Colors.red),
                              const SizedBox(height: 4),
                              const Text('Last Check-out',
                                  style:
                                      TextStyle(fontWeight: FontWeight.bold)),
                              Text(formatTime(checkOutTime)),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Expanded(
                  child: ListView(
                    children: [
                      Card(
                        child: ListTile(
                          leading: Icon(Icons.person),
                          title: Text('Personal Details'),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Email: johndoe@example.com'),
                              Text('Phone: +1234567890'),
                            ],
                          ),
                        ),
                      ),
                      Card(
                        child: ListTile(
                          leading: Icon(Icons.bar_chart),
                          title: Text('Performance Statistics'),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Completed Projects: 15'),
                              Text('Ongoing Projects: 3'),
                              Text('Performance Rating: 4.8/5'),
                            ],
                          ),
                        ),
                      ),
                      Card(
                        child: ListTile(
                          leading: Icon(Icons.history),
                          title: Text('Recent Activities'),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Checked in at 9:00 AM'),
                              Text('Meeting with team at 11:00 AM'),
                              Text('Submitted report at 2:00 PM'),
                            ],
                          ),
                        ),
                      ),
                      Card(
                        child: ListTile(
                          leading: Icon(Icons.calendar_today),
                          title: Text('Upcoming Events'),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Project Deadline: 5th July 2024'),
                              Text('Client Meeting: 7th July 2024'),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      onPressed: () {
                        // Action for settings button
                      },
                      icon: Icon(Icons.settings),
                      label: Text('Settings'),
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.symmetric(
                            horizontal: 20, vertical: 10),
                        textStyle: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    ElevatedButton.icon(
                      onPressed: () {
                        // Action for support button
                      },
                      icon: Icon(Icons.support),
                      label: Text('Support'),
                      style: ElevatedButton.styleFrom(
                        padding: EdgeInsets.symmetric(
                            horizontal: 20, vertical: 10),
                        textStyle: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
  );
}
